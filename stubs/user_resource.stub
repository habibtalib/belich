<?php

declare(strict_types=1);

namespace App\Belich\Resources;

use Daguilarm\Belich\Fields\Types\ID;
use Daguilarm\Belich\Fields\Types\Password;
use Daguilarm\Belich\Fields\Types\PasswordConfirmation;
use Daguilarm\Belich\Fields\Types\Text;
use Daguilarm\Belich\Resources;
use Illuminate\Http\Request;

class User extends Resources {

    public static string $model = '\App\Models\User';
    // public static array $relationships = ['profile'];
    public static bool $displayInNavigation = true;
    // public static string $group = 'Personal';
    public static string $icon = 'user-friends';
    public static string $label = 'User';
    public static string $pluralLabel = 'Users';

    public function __construct()
    {
        //
    }

    /**
     * Build the query for the given resource.
     */
    public function indexQuery()
    {
        return $this->model();
    }

    /**
     * Get the fields displayed by the resource.
     */
    public function fields(Request $request): array
    {
        return [
            ID::make('Id')
                ->sortable(),
            Text::make('Name', 'name')
                ->sortable()
                ->rules('required'),
            Text::make('Email', 'email')
                ->rules('required', 'email', 'unique:users,email')
                ->sortable(),
            Password::make('Password', 'password')
                ->creationRules('required', 'required_with:password_confirmation', 'confirmed', 'min:6')
                ->updateRules('nullable', 'required_with:password_confirmation', 'same:password_confirmation', 'min:6')
                ->onlyOnForms(),
            PasswordConfirmation::make('Password confirmation'),
        ];
    }

    /**
     * Set the custom metric cards
     */
    public function metrics(Request $request): array
    {
        return [];
    }

    /**
     * Set the custom cards
     */
    public function cards(Request $request): array
    {
        return [];
    }

    /**
     * Set the custom filters
     */
    public static function filters(Request $request): array
    {
        return [];
    }
}
